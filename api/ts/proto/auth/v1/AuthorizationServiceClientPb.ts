/**
 * @fileoverview gRPC-Web generated client stub for auth.v1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.20.3
// source: proto/auth/v1/authorization.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as proto_auth_v1_authorization_pb from '../../../proto/auth/v1/authorization_pb'; // proto import: "proto/auth/v1/authorization.proto"


export class AuthorizationServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorGetUserPermissions = new grpcWeb.MethodDescriptor(
    '/auth.v1.AuthorizationService/GetUserPermissions',
    grpcWeb.MethodType.UNARY,
    proto_auth_v1_authorization_pb.GetUserPermissionsRequest,
    proto_auth_v1_authorization_pb.GetUserPermissionsResponse,
    (request: proto_auth_v1_authorization_pb.GetUserPermissionsRequest) => {
      return request.serializeBinary();
    },
    proto_auth_v1_authorization_pb.GetUserPermissionsResponse.deserializeBinary
  );

  getUserPermissions(
    request: proto_auth_v1_authorization_pb.GetUserPermissionsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_auth_v1_authorization_pb.GetUserPermissionsResponse>;

  getUserPermissions(
    request: proto_auth_v1_authorization_pb.GetUserPermissionsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_auth_v1_authorization_pb.GetUserPermissionsResponse) => void): grpcWeb.ClientReadableStream<proto_auth_v1_authorization_pb.GetUserPermissionsResponse>;

  getUserPermissions(
    request: proto_auth_v1_authorization_pb.GetUserPermissionsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_auth_v1_authorization_pb.GetUserPermissionsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.v1.AuthorizationService/GetUserPermissions',
        request,
        metadata || {},
        this.methodDescriptorGetUserPermissions,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.v1.AuthorizationService/GetUserPermissions',
    request,
    metadata || {},
    this.methodDescriptorGetUserPermissions);
  }

  methodDescriptorHasPermission = new grpcWeb.MethodDescriptor(
    '/auth.v1.AuthorizationService/HasPermission',
    grpcWeb.MethodType.UNARY,
    proto_auth_v1_authorization_pb.HasPermissionRequest,
    proto_auth_v1_authorization_pb.HasPermissionResponse,
    (request: proto_auth_v1_authorization_pb.HasPermissionRequest) => {
      return request.serializeBinary();
    },
    proto_auth_v1_authorization_pb.HasPermissionResponse.deserializeBinary
  );

  hasPermission(
    request: proto_auth_v1_authorization_pb.HasPermissionRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_auth_v1_authorization_pb.HasPermissionResponse>;

  hasPermission(
    request: proto_auth_v1_authorization_pb.HasPermissionRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_auth_v1_authorization_pb.HasPermissionResponse) => void): grpcWeb.ClientReadableStream<proto_auth_v1_authorization_pb.HasPermissionResponse>;

  hasPermission(
    request: proto_auth_v1_authorization_pb.HasPermissionRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_auth_v1_authorization_pb.HasPermissionResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.v1.AuthorizationService/HasPermission',
        request,
        metadata || {},
        this.methodDescriptorHasPermission,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.v1.AuthorizationService/HasPermission',
    request,
    metadata || {},
    this.methodDescriptorHasPermission);
  }

  methodDescriptorCheckPermissions = new grpcWeb.MethodDescriptor(
    '/auth.v1.AuthorizationService/CheckPermissions',
    grpcWeb.MethodType.UNARY,
    proto_auth_v1_authorization_pb.CheckPermissionsRequest,
    proto_auth_v1_authorization_pb.CheckPermissionsResponse,
    (request: proto_auth_v1_authorization_pb.CheckPermissionsRequest) => {
      return request.serializeBinary();
    },
    proto_auth_v1_authorization_pb.CheckPermissionsResponse.deserializeBinary
  );

  checkPermissions(
    request: proto_auth_v1_authorization_pb.CheckPermissionsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_auth_v1_authorization_pb.CheckPermissionsResponse>;

  checkPermissions(
    request: proto_auth_v1_authorization_pb.CheckPermissionsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_auth_v1_authorization_pb.CheckPermissionsResponse) => void): grpcWeb.ClientReadableStream<proto_auth_v1_authorization_pb.CheckPermissionsResponse>;

  checkPermissions(
    request: proto_auth_v1_authorization_pb.CheckPermissionsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_auth_v1_authorization_pb.CheckPermissionsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.v1.AuthorizationService/CheckPermissions',
        request,
        metadata || {},
        this.methodDescriptorCheckPermissions,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.v1.AuthorizationService/CheckPermissions',
    request,
    metadata || {},
    this.methodDescriptorCheckPermissions);
  }

  methodDescriptorListPermissionPaths = new grpcWeb.MethodDescriptor(
    '/auth.v1.AuthorizationService/ListPermissionPaths',
    grpcWeb.MethodType.UNARY,
    proto_auth_v1_authorization_pb.ListPermissionPathsRequest,
    proto_auth_v1_authorization_pb.ListPermissionPathsResponse,
    (request: proto_auth_v1_authorization_pb.ListPermissionPathsRequest) => {
      return request.serializeBinary();
    },
    proto_auth_v1_authorization_pb.ListPermissionPathsResponse.deserializeBinary
  );

  listPermissionPaths(
    request: proto_auth_v1_authorization_pb.ListPermissionPathsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_auth_v1_authorization_pb.ListPermissionPathsResponse>;

  listPermissionPaths(
    request: proto_auth_v1_authorization_pb.ListPermissionPathsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_auth_v1_authorization_pb.ListPermissionPathsResponse) => void): grpcWeb.ClientReadableStream<proto_auth_v1_authorization_pb.ListPermissionPathsResponse>;

  listPermissionPaths(
    request: proto_auth_v1_authorization_pb.ListPermissionPathsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_auth_v1_authorization_pb.ListPermissionPathsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.v1.AuthorizationService/ListPermissionPaths',
        request,
        metadata || {},
        this.methodDescriptorListPermissionPaths,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.v1.AuthorizationService/ListPermissionPaths',
    request,
    metadata || {},
    this.methodDescriptorListPermissionPaths);
  }

  methodDescriptorListPermissions = new grpcWeb.MethodDescriptor(
    '/auth.v1.AuthorizationService/ListPermissions',
    grpcWeb.MethodType.UNARY,
    proto_auth_v1_authorization_pb.ListPermissionsRequest,
    proto_auth_v1_authorization_pb.ListPermissionsResponse,
    (request: proto_auth_v1_authorization_pb.ListPermissionsRequest) => {
      return request.serializeBinary();
    },
    proto_auth_v1_authorization_pb.ListPermissionsResponse.deserializeBinary
  );

  listPermissions(
    request: proto_auth_v1_authorization_pb.ListPermissionsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_auth_v1_authorization_pb.ListPermissionsResponse>;

  listPermissions(
    request: proto_auth_v1_authorization_pb.ListPermissionsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_auth_v1_authorization_pb.ListPermissionsResponse) => void): grpcWeb.ClientReadableStream<proto_auth_v1_authorization_pb.ListPermissionsResponse>;

  listPermissions(
    request: proto_auth_v1_authorization_pb.ListPermissionsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_auth_v1_authorization_pb.ListPermissionsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.v1.AuthorizationService/ListPermissions',
        request,
        metadata || {},
        this.methodDescriptorListPermissions,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.v1.AuthorizationService/ListPermissions',
    request,
    metadata || {},
    this.methodDescriptorListPermissions);
  }

  methodDescriptorMigratePermissions = new grpcWeb.MethodDescriptor(
    '/auth.v1.AuthorizationService/MigratePermissions',
    grpcWeb.MethodType.UNARY,
    proto_auth_v1_authorization_pb.MigratePermissionsRequest,
    proto_auth_v1_authorization_pb.MigratePermissionsResponse,
    (request: proto_auth_v1_authorization_pb.MigratePermissionsRequest) => {
      return request.serializeBinary();
    },
    proto_auth_v1_authorization_pb.MigratePermissionsResponse.deserializeBinary
  );

  migratePermissions(
    request: proto_auth_v1_authorization_pb.MigratePermissionsRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_auth_v1_authorization_pb.MigratePermissionsResponse>;

  migratePermissions(
    request: proto_auth_v1_authorization_pb.MigratePermissionsRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_auth_v1_authorization_pb.MigratePermissionsResponse) => void): grpcWeb.ClientReadableStream<proto_auth_v1_authorization_pb.MigratePermissionsResponse>;

  migratePermissions(
    request: proto_auth_v1_authorization_pb.MigratePermissionsRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_auth_v1_authorization_pb.MigratePermissionsResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.v1.AuthorizationService/MigratePermissions',
        request,
        metadata || {},
        this.methodDescriptorMigratePermissions,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.v1.AuthorizationService/MigratePermissions',
    request,
    metadata || {},
    this.methodDescriptorMigratePermissions);
  }

  methodDescriptorAssignRolesToUser = new grpcWeb.MethodDescriptor(
    '/auth.v1.AuthorizationService/AssignRolesToUser',
    grpcWeb.MethodType.UNARY,
    proto_auth_v1_authorization_pb.AssignRolesToUserRequest,
    proto_auth_v1_authorization_pb.AssignRolesToUserResponse,
    (request: proto_auth_v1_authorization_pb.AssignRolesToUserRequest) => {
      return request.serializeBinary();
    },
    proto_auth_v1_authorization_pb.AssignRolesToUserResponse.deserializeBinary
  );

  assignRolesToUser(
    request: proto_auth_v1_authorization_pb.AssignRolesToUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_auth_v1_authorization_pb.AssignRolesToUserResponse>;

  assignRolesToUser(
    request: proto_auth_v1_authorization_pb.AssignRolesToUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_auth_v1_authorization_pb.AssignRolesToUserResponse) => void): grpcWeb.ClientReadableStream<proto_auth_v1_authorization_pb.AssignRolesToUserResponse>;

  assignRolesToUser(
    request: proto_auth_v1_authorization_pb.AssignRolesToUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_auth_v1_authorization_pb.AssignRolesToUserResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.v1.AuthorizationService/AssignRolesToUser',
        request,
        metadata || {},
        this.methodDescriptorAssignRolesToUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.v1.AuthorizationService/AssignRolesToUser',
    request,
    metadata || {},
    this.methodDescriptorAssignRolesToUser);
  }

  methodDescriptorGetUserRoles = new grpcWeb.MethodDescriptor(
    '/auth.v1.AuthorizationService/GetUserRoles',
    grpcWeb.MethodType.UNARY,
    proto_auth_v1_authorization_pb.GetUserRolesRequest,
    proto_auth_v1_authorization_pb.GetUserRolesResponse,
    (request: proto_auth_v1_authorization_pb.GetUserRolesRequest) => {
      return request.serializeBinary();
    },
    proto_auth_v1_authorization_pb.GetUserRolesResponse.deserializeBinary
  );

  getUserRoles(
    request: proto_auth_v1_authorization_pb.GetUserRolesRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_auth_v1_authorization_pb.GetUserRolesResponse>;

  getUserRoles(
    request: proto_auth_v1_authorization_pb.GetUserRolesRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_auth_v1_authorization_pb.GetUserRolesResponse) => void): grpcWeb.ClientReadableStream<proto_auth_v1_authorization_pb.GetUserRolesResponse>;

  getUserRoles(
    request: proto_auth_v1_authorization_pb.GetUserRolesRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_auth_v1_authorization_pb.GetUserRolesResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.v1.AuthorizationService/GetUserRoles',
        request,
        metadata || {},
        this.methodDescriptorGetUserRoles,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.v1.AuthorizationService/GetUserRoles',
    request,
    metadata || {},
    this.methodDescriptorGetUserRoles);
  }

  methodDescriptorCreateRole = new grpcWeb.MethodDescriptor(
    '/auth.v1.AuthorizationService/CreateRole',
    grpcWeb.MethodType.UNARY,
    proto_auth_v1_authorization_pb.CreateRoleRequest,
    proto_auth_v1_authorization_pb.CreateRoleResponse,
    (request: proto_auth_v1_authorization_pb.CreateRoleRequest) => {
      return request.serializeBinary();
    },
    proto_auth_v1_authorization_pb.CreateRoleResponse.deserializeBinary
  );

  createRole(
    request: proto_auth_v1_authorization_pb.CreateRoleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_auth_v1_authorization_pb.CreateRoleResponse>;

  createRole(
    request: proto_auth_v1_authorization_pb.CreateRoleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_auth_v1_authorization_pb.CreateRoleResponse) => void): grpcWeb.ClientReadableStream<proto_auth_v1_authorization_pb.CreateRoleResponse>;

  createRole(
    request: proto_auth_v1_authorization_pb.CreateRoleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_auth_v1_authorization_pb.CreateRoleResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.v1.AuthorizationService/CreateRole',
        request,
        metadata || {},
        this.methodDescriptorCreateRole,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.v1.AuthorizationService/CreateRole',
    request,
    metadata || {},
    this.methodDescriptorCreateRole);
  }

  methodDescriptorUpdateRole = new grpcWeb.MethodDescriptor(
    '/auth.v1.AuthorizationService/UpdateRole',
    grpcWeb.MethodType.UNARY,
    proto_auth_v1_authorization_pb.UpdateRoleRequest,
    proto_auth_v1_authorization_pb.UpdateRoleResponse,
    (request: proto_auth_v1_authorization_pb.UpdateRoleRequest) => {
      return request.serializeBinary();
    },
    proto_auth_v1_authorization_pb.UpdateRoleResponse.deserializeBinary
  );

  updateRole(
    request: proto_auth_v1_authorization_pb.UpdateRoleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_auth_v1_authorization_pb.UpdateRoleResponse>;

  updateRole(
    request: proto_auth_v1_authorization_pb.UpdateRoleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_auth_v1_authorization_pb.UpdateRoleResponse) => void): grpcWeb.ClientReadableStream<proto_auth_v1_authorization_pb.UpdateRoleResponse>;

  updateRole(
    request: proto_auth_v1_authorization_pb.UpdateRoleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_auth_v1_authorization_pb.UpdateRoleResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.v1.AuthorizationService/UpdateRole',
        request,
        metadata || {},
        this.methodDescriptorUpdateRole,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.v1.AuthorizationService/UpdateRole',
    request,
    metadata || {},
    this.methodDescriptorUpdateRole);
  }

  methodDescriptorListRole = new grpcWeb.MethodDescriptor(
    '/auth.v1.AuthorizationService/ListRole',
    grpcWeb.MethodType.UNARY,
    proto_auth_v1_authorization_pb.ListRoleRequest,
    proto_auth_v1_authorization_pb.ListRoleResponse,
    (request: proto_auth_v1_authorization_pb.ListRoleRequest) => {
      return request.serializeBinary();
    },
    proto_auth_v1_authorization_pb.ListRoleResponse.deserializeBinary
  );

  listRole(
    request: proto_auth_v1_authorization_pb.ListRoleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_auth_v1_authorization_pb.ListRoleResponse>;

  listRole(
    request: proto_auth_v1_authorization_pb.ListRoleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_auth_v1_authorization_pb.ListRoleResponse) => void): grpcWeb.ClientReadableStream<proto_auth_v1_authorization_pb.ListRoleResponse>;

  listRole(
    request: proto_auth_v1_authorization_pb.ListRoleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_auth_v1_authorization_pb.ListRoleResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.v1.AuthorizationService/ListRole',
        request,
        metadata || {},
        this.methodDescriptorListRole,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.v1.AuthorizationService/ListRole',
    request,
    metadata || {},
    this.methodDescriptorListRole);
  }

}

