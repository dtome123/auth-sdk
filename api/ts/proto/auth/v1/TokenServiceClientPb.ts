/**
 * @fileoverview gRPC-Web generated client stub for auth.v1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v3.20.3
// source: proto/auth/v1/token.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as proto_auth_v1_token_pb from '../../../proto/auth/v1/token_pb'; // proto import: "proto/auth/v1/token.proto"


export class TokenServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'binary';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorToken = new grpcWeb.MethodDescriptor(
    '/auth.v1.TokenService/Token',
    grpcWeb.MethodType.UNARY,
    proto_auth_v1_token_pb.TokenRequest,
    proto_auth_v1_token_pb.TokenResponse,
    (request: proto_auth_v1_token_pb.TokenRequest) => {
      return request.serializeBinary();
    },
    proto_auth_v1_token_pb.TokenResponse.deserializeBinary
  );

  token(
    request: proto_auth_v1_token_pb.TokenRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_auth_v1_token_pb.TokenResponse>;

  token(
    request: proto_auth_v1_token_pb.TokenRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_auth_v1_token_pb.TokenResponse) => void): grpcWeb.ClientReadableStream<proto_auth_v1_token_pb.TokenResponse>;

  token(
    request: proto_auth_v1_token_pb.TokenRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_auth_v1_token_pb.TokenResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.v1.TokenService/Token',
        request,
        metadata || {},
        this.methodDescriptorToken,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.v1.TokenService/Token',
    request,
    metadata || {},
    this.methodDescriptorToken);
  }

  methodDescriptorSign = new grpcWeb.MethodDescriptor(
    '/auth.v1.TokenService/Sign',
    grpcWeb.MethodType.UNARY,
    proto_auth_v1_token_pb.SignRequest,
    proto_auth_v1_token_pb.SignResponse,
    (request: proto_auth_v1_token_pb.SignRequest) => {
      return request.serializeBinary();
    },
    proto_auth_v1_token_pb.SignResponse.deserializeBinary
  );

  sign(
    request: proto_auth_v1_token_pb.SignRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_auth_v1_token_pb.SignResponse>;

  sign(
    request: proto_auth_v1_token_pb.SignRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_auth_v1_token_pb.SignResponse) => void): grpcWeb.ClientReadableStream<proto_auth_v1_token_pb.SignResponse>;

  sign(
    request: proto_auth_v1_token_pb.SignRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_auth_v1_token_pb.SignResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.v1.TokenService/Sign',
        request,
        metadata || {},
        this.methodDescriptorSign,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.v1.TokenService/Sign',
    request,
    metadata || {},
    this.methodDescriptorSign);
  }

  methodDescriptorRefresh = new grpcWeb.MethodDescriptor(
    '/auth.v1.TokenService/Refresh',
    grpcWeb.MethodType.UNARY,
    proto_auth_v1_token_pb.RefreshRequest,
    proto_auth_v1_token_pb.RefreshResponse,
    (request: proto_auth_v1_token_pb.RefreshRequest) => {
      return request.serializeBinary();
    },
    proto_auth_v1_token_pb.RefreshResponse.deserializeBinary
  );

  refresh(
    request: proto_auth_v1_token_pb.RefreshRequest,
    metadata?: grpcWeb.Metadata | null): Promise<proto_auth_v1_token_pb.RefreshResponse>;

  refresh(
    request: proto_auth_v1_token_pb.RefreshRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: proto_auth_v1_token_pb.RefreshResponse) => void): grpcWeb.ClientReadableStream<proto_auth_v1_token_pb.RefreshResponse>;

  refresh(
    request: proto_auth_v1_token_pb.RefreshRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: proto_auth_v1_token_pb.RefreshResponse) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/auth.v1.TokenService/Refresh',
        request,
        metadata || {},
        this.methodDescriptorRefresh,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/auth.v1.TokenService/Refresh',
    request,
    metadata || {},
    this.methodDescriptorRefresh);
  }

}

